import streamlit as st
import pandas as pd
from datetime import datetime
import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.fonts import addMapping

# Konfigur√°cia str√°nky
st.set_page_config(
    page_title="Kazetov√© 3D P√≠smen√° - Kalkul√°tor",
    page_icon="üî§",
    layout="wide"
)

# Naƒç√≠tanie d√°t z Excel s√∫boru
@st.cache_data
def load_pricing_data():
    """Naƒç√≠tanie cenov√Ωch d√°t z Excel s√∫boru"""
    try:
        df = pd.read_excel('Sveteln√° reklama.xlsx')
        return df
    except:
        return None

# Hlaviƒçka
st.title("üî§ Kazetov√© 3D P√≠smen√° - Kalkul√°tor")
st.markdown("---")

# Naƒç√≠tanie d√°t
pricing_df = load_pricing_data()

if pricing_df is None:
    st.error("‚ùå Nepodarilo sa naƒç√≠ta≈• cenov√© d√°ta z Excel s√∫boru!")
    st.stop()

# Hlavn√Ω formul√°r
col1, col2 = st.columns([2, 1])

with col1:
    st.header("Kalkul√°cia kazetov√Ωch 3D p√≠smen")
    
    # Z√°kladn√© √∫daje
    st.subheader("Z√°kladn√© √∫daje")
    nazov_projektu = st.text_input("N√°zov projektu")
    zakaznik = st.text_input("Z√°kazn√≠k")
    datum = st.date_input("D√°tum", datetime.now())
    
    # Parametre p√≠smen
    st.subheader("Parametre p√≠smen")
    
    # V√Ω≈°ka p√≠smen
    vyska_pismen = st.selectbox(
        "V√Ω≈°ka p√≠smen",
        ["do 20cm", "do 30cm", "do 40cm", "do 50cm", "do 60cm", 
         "do 70cm", "do 80cm", "do 90cm", "do 100cm", "do 150cm"]
    )
    
    # Poƒçet p√≠smen
    pocet_pismen = st.number_input("Poƒçet p√≠smen", min_value=1, value=5, step=1)
    
    # Materi√°l
    material = st.selectbox(
        "Materi√°l",
        ["10mm PVC", "5mm PLEXI"]
    )
    
    # Osvetlenie
    osvetlenie = st.checkbox("LED osvetlenie")
    
    # Mont√°≈æ
    montaz = st.checkbox("Mont√°≈æ a in≈°tal√°cia")
    
    # Dodatoƒçn√© slu≈æby
    st.subheader("Dodatoƒçn√© slu≈æby")
    col_dod1, col_dod2 = st.columns(2)
    with col_dod1:
        lakovanie = st.checkbox("Lakovanie")
        foliovanie = st.checkbox("F√≥liovanie")
    with col_dod2:
        doprava = st.checkbox("Doprava")
        navrh = st.checkbox("Grafick√Ω n√°vrh")
    
    # Pozn√°mky
    poznamky = st.text_area("Pozn√°mky")

with col2:
    st.header("Kalkul√°cia")
    
    # Mapovanie v√Ω≈°ky na stƒ∫pec v Excel (s medzerami na konci!)
    vyska_mapping = {
        "do 20cm": "KP / do 20cm ",
        "do 30cm": "KP / do 30cm ",
        "do 40cm": "KP / do 40cm ",
        "do 50cm": "KP / do 50cm ",
        "do 60cm": "KP / do 60cm ",
        "do 70cm": "KP / do 70cm ",
        "do 80cm": "KP / do 80cm ",
        "do 90cm": "KP / do 90cm ",
        "do 100cm": "KP / do 100cm ",
        "do 150cm": "KP / do 150cm "
    }
    
    stlpec_vysky = vyska_mapping[vyska_pismen]
    
    # Z√≠skanie cien z Excel tabuƒæky
    try:
        # Riadok 15 obsahuje celkov√© n√°klady (N√°klad)
        naklady_na_pismeno = pricing_df.loc[15, stlpec_vysky]
        
        # Riadok 17 obsahuje predajn√∫ cenu (Predaj)
        predajna_cena_na_pismeno = pricing_df.loc[17, stlpec_vysky]
        
        # Z√°kladn√° cena za v≈°etky p√≠smen√°
        zakladna_cena = predajna_cena_na_pismeno * pocet_pismen
        
        st.metric("Poƒçet p√≠smen", pocet_pismen)
        st.metric("V√Ω≈°ka p√≠smen", vyska_pismen)
        st.metric("Cena za 1 p√≠smeno", f"{predajna_cena_na_pismeno:.2f} ‚Ç¨")
        
        # Prir√°≈æky
        prirazky = 0
        
        if lakovanie:
            prirazka_lakovanie = zakladna_cena * 0.15  # 15% za lakovanie
            prirazky += prirazka_lakovanie
            st.write(f"Lakovanie (15%): {prirazka_lakovanie:.2f} ‚Ç¨")
        
        if foliovanie:
            prirazka_foliovanie = zakladna_cena * 0.20  # 20% za f√≥liovanie
            prirazky += prirazka_foliovanie
            st.write(f"F√≥liovanie (20%): {prirazka_foliovanie:.2f} ‚Ç¨")
        
        if osvetlenie:
            # LED moduly a zdroj z Excel tabuƒæky
            led_modul_cena = pricing_df.loc[4, stlpec_vysky] * pocet_pismen  # Led modul
            led_zdroj_cena = pricing_df.loc[5, stlpec_vysky] * pocet_pismen   # LED zdroj
            osvetlenie_cena = led_modul_cena + led_zdroj_cena
            prirazky += osvetlenie_cena
            st.write(f"LED osvetlenie: {osvetlenie_cena:.2f} ‚Ç¨")
        
        if montaz:
            montaz_cena = zakladna_cena * 0.25  # 25% za mont√°≈æ
            prirazky += montaz_cena
            st.write(f"Mont√°≈æ (25%): {montaz_cena:.2f} ‚Ç¨")
        
        if doprava:
            doprava_cena = 50  # Fixn√° cena za dopravu
            prirazky += doprava_cena
            st.write(f"Doprava: {doprava_cena:.2f} ‚Ç¨")
        
        if navrh:
            navrh_cena = 100  # Fixn√° cena za n√°vrh
            prirazky += navrh_cena
            st.write(f"Grafick√Ω n√°vrh: {navrh_cena:.2f} ‚Ç¨")
        
        # Celkov√° cena
        celkova_cena = zakladna_cena + prirazky
        
        st.markdown("---")
        st.subheader("Rozpis cien")
        st.write(f"Z√°kladn√° cena ({pocet_pismen}x {predajna_cena_na_pismeno:.2f}‚Ç¨): {zakladna_cena:.2f} ‚Ç¨")
        if prirazky > 0:
            st.write(f"Prir√°≈æky celkom: {prirazky:.2f} ‚Ç¨")
        
        st.markdown("---")
        st.metric("**CELKOV√Å CENA**", f"{celkova_cena:.2f} ‚Ç¨")
        
        # Mar≈æa z Excel s√∫boru
        marza_excel = pricing_df.loc[19, stlpec_vysky] * 100  # Riadok 19 = mar≈æa v desatinnom tvare
        st.metric("Mar≈æa (z Excel)", f"{marza_excel:.1f}%")
        
    except Exception as e:
        st.error(f"Chyba pri v√Ωpoƒçte: {e}")
        st.write(f"Debug info: {e}")
        celkova_cena = 0
        zakladna_cena = 0

# Tlaƒçidlo na generovanie PDF
if st.button("üìÑ Generova≈• PDF ponuku", type="primary"):
    if nazov_projektu and zakaznik:
        # Vytvorenie PDF
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        
        # Vytvorenie vlastn√©ho ≈°t√Ωlu s podporou UTF-8
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from reportlab.lib.fonts import addMapping
        
        # Registr√°cia fontu s podporou diakritiky
        try:
            # Pokus o pou≈æitie DejaVu Sans fontu (m√° dobr√∫ podporu pre slovenƒçinu)
            import os
            font_paths = [
                '/System/Library/Fonts/Arial.ttf',  # macOS
                '/System/Library/Fonts/Helvetica.ttc',  # macOS
                'C:\\Windows\\Fonts\\arial.ttf',  # Windows
                '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',  # Linux
            ]
            
            font_registered = False
            for font_path in font_paths:
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont('CustomFont', font_path))
                        font_name = 'CustomFont'
                        font_registered = True
                        break
                    except:
                        continue
            
            if not font_registered:
                font_name = 'Helvetica'
        except:
            font_name = 'Helvetica'
        
        story = []
        
        # Nadpis
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # Center
            fontName=font_name
        )
        story.append(Paragraph("PONUKA - KAZETOV√â 3D P√çSMEN√Å", title_style))
        story.append(Spacer(1, 20))
        
        # Z√°kladn√© √∫daje
        data = [
            ['Projekt:', nazov_projektu],
            ['Z√°kazn√≠k:', zakaznik],
            ['D√°tum:', datum.strftime('%d.%m.%Y')],
            ['Poƒçet p√≠smen:', str(pocet_pismen)],
            ['V√Ω≈°ka p√≠smen:', vyska_pismen],
            ['Materi√°l:', material]
        ]
        
        table = Table(data, colWidths=[2*inch, 3*inch])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), font_name),
            ('FONTNAME', (1, 0), (1, -1), font_name),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(table)
        story.append(Spacer(1, 20))
        
        # Cenov√° kalkul√°cia
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontName=font_name
        )
        story.append(Paragraph("CENOV√Å KALKUL√ÅCIA", heading_style))
        
        cena_data = [['Polo≈æka', 'Cena (‚Ç¨)']]
        cena_data.append(['Z√°kladn√° cena', f'{zakladna_cena:.2f}'])
        
        if lakovanie:
            cena_data.append(['Lakovanie', f'{zakladna_cena * 0.15:.2f}'])
        if foliovanie:
            cena_data.append(['F√≥liovanie', f'{zakladna_cena * 0.20:.2f}'])
        if osvetlenie:
            cena_data.append(['LED osvetlenie', f'{osvetlenie_cena:.2f}'])
        if montaz:
            cena_data.append(['Mont√°≈æ', f'{zakladna_cena * 0.25:.2f}'])
        if doprava:
            cena_data.append(['Doprava', '50.00'])
        if navrh:
            cena_data.append(['Grafick√Ω n√°vrh', '100.00'])
        
        cena_data.append(['CELKOM', f'{celkova_cena:.2f}'])
        
        cena_table = Table(cena_data, colWidths=[3*inch, 2*inch])
        cena_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (-1, -1), font_name),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(cena_table)
        
        if poznamky:
            story.append(Spacer(1, 20))
            notes_style = ParagraphStyle(
                'CustomNotes',
                parent=styles['Heading2'],
                fontName=font_name
            )
            story.append(Paragraph("POZN√ÅMKY", notes_style))
            
            notes_content_style = ParagraphStyle(
                'CustomNotesContent',
                parent=styles['Normal'],
                fontName=font_name
            )
            story.append(Paragraph(poznamky, notes_content_style))
        
        doc.build(story)
        buffer.seek(0)
        
        # Download tlaƒçidlo
        st.download_button(
            label="‚¨áÔ∏è Stiahnu≈• PDF",
            data=buffer,
            file_name=f"ponuka_3d_pismena_{nazov_projektu.replace(' ', '_')}_{datum.strftime('%Y%m%d')}.pdf",
            mime="application/pdf"
        )
        
        st.success("PDF ponuka bola vygenerovan√°!")
    else:
        st.error("Vypl≈àte pros√≠m n√°zov projektu a z√°kazn√≠ka!")

# Zobrazenie cenn√≠ka
with st.expander("üìä Cenn√≠k kazetov√Ωch 3D p√≠smen"):
    if pricing_df is not None:
        st.subheader("Predajn√© ceny za 1 p√≠smeno (‚Ç¨)")
        
        # Vytvorenie tabuƒæky s cenami
        vysky = ["do 20cm", "do 30cm", "do 40cm", "do 50cm", "do 60cm", 
                "do 70cm", "do 80cm", "do 90cm", "do 100cm", "do 150cm"]
        
        cennik_data = []
        for vyska in vysky:
            stlpec = f"KP / {vyska} "  # S medzerou na konci!
            try:
                cena = pricing_df.loc[17, stlpec]  # Riadok 17 = predajn√° cena
                cennik_data.append([vyska, f"{cena:.2f} ‚Ç¨"])
            except:
                cennik_data.append([vyska, "N/A"])
        
        cennik_df = pd.DataFrame(cennik_data, columns=["V√Ω≈°ka p√≠smena", "Cena za kus"])
        st.table(cennik_df)
        
        # Zobrazenie mar≈æe
        st.subheader("Mar≈æa podƒæa v√Ω≈°ky p√≠smen")
        marza_data = []
        for vyska in vysky:
            stlpec = f"KP / {vyska} "  # S medzerou na konci!
            try:
                marza_decimal = pricing_df.loc[19, stlpec]  # Riadok 19 = mar≈æa v desatinnom tvare
                marza_percent = marza_decimal * 100  # Konverzia na percent√°
                marza_data.append([vyska, f"{marza_percent:.0f}%"])
            except:
                marza_data.append([vyska, "N/A"])
        
        marza_df = pd.DataFrame(marza_data, columns=["V√Ω≈°ka p√≠smena", "Mar≈æa"])
        st.table(marza_df) 